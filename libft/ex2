 NÃ­vel 1 â€“ FunÃ§Ãµes simples com escrita em fd

Essas funÃ§Ãµes sÃ£o boas para comeÃ§ar, pois envolvem apenas escrita com write():

    ft_putchar_fd.c â€“ escreve um caractere no file descriptor.

    ft_putstr_fd.c â€“ escreve uma string.

    ft_putendl_fd.c â€“ escreve uma string seguida de \n.

    ft_putnbr_fd.c â€“ escreve um nÃºmero inteiro.

ğŸ”¹ NÃ­vel 2 â€“ ManipulaÃ§Ã£o bÃ¡sica de strings

Agora vocÃª entra em funÃ§Ãµes que criam novas strings:

    ft_substr.c â€“ cria uma substring de uma string.

    ft_strjoin.c â€“ junta duas strings.

    ft_strtrim.c â€“ remove caracteres de uma string do inÃ­cio e do fim.

ğŸ”¹ NÃ­vel 3 â€“ Uso de funÃ§Ãµes auxiliares e lÃ³gicas mais complexas

Aqui as funÃ§Ãµes envolvem lÃ³gica mais elaborada, Ã­ndices, alocaÃ§Ã£o e/ou ponteiros de funÃ§Ã£o:

    ft_strmapi.c â€“ aplica uma funÃ§Ã£o a cada caractere da string para criar uma nova.

    ft_striteri.c â€“ aplica uma funÃ§Ã£o in-place a cada caractere da string.

    ft_itoa â€“ converte um inteiro para string (requer lidar com nÃºmeros negativos, zero e alocaÃ§Ã£o dinÃ¢mica).

ğŸ”¹ NÃ­vel 4 â€“ Mais complexa: alocaÃ§Ã£o + parsing + ponteiros

Essa geralmente Ã© a mais desafiadora da libft:

    ft_split.c â€“ separa uma string em substrings com base em um delimitador, exige vÃ¡rias alocaÃ§Ãµes e cuidado com leaks.

